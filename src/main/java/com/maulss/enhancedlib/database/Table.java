/*
 * EnhancedLib
 * 
 * Created on 16 June 2015 at 10:24 PM.
 */

package com.maulss.enhancedlib.database;

import com.maulss.enhancedlib.database.data.Data;
import com.maulss.enhancedlib.database.data.StatType;
import com.maulss.enhancedlib.database.value.Value;
import com.maulss.enhancedlib.database.value.ValueType;
import com.sun.istack.internal.NotNull;
import org.apache.commons.lang3.Validate;

import javax.sql.rowset.CachedRowSet;
import java.io.Serializable;
import java.sql.DatabaseMetaData;
import java.sql.SQLException;

@SuppressWarnings("JavaDoc")
public abstract class Table implements Serializable {

	private static final long serialVersionUID = 5497708300479532672L;

	private final transient Database database = Database.getDatabase();


	/**
	 * The name of the table.
	 */
	private final String table;

	protected Table(@NotNull String table) {
		this.table = Validate.notNull(table);
	}


	/**
	 * Creates a new table with the specified array of {@link
	 * com.maulss.enhancedlib.database.data.Data} types.
	 *
	 * @param 	types
	 * 			The list of types of columns to be inserted
	 *          into the database.
	 * @throws 	DatabaseException
	 * 			If a database error caused by {@link Database} occurs.
	 * @throws 	NullPointerException
	 * 			If {@code types == null}.
	 * @see 	com.maulss.enhancedlib.database.data.Data
	 */
	public abstract void create(@NotNull Data[] types);


	/**
	 * Creates a new table with the specified array of {@link
	 * com.maulss.enhancedlib.database.data.Data} types.
	 *
	 * @param 	types
	 * 			The list of types of columns to be inserted
	 *          into the database.
	 * @param 	index
	 * 			The column that will be marked as an index.
	 * @throws 	NullPointerException
	 * 			If {@code types == null | index == null}.
	 * @throws 	DatabaseException
	 * 			If a database error caused by {@link Database} occurs.
	 * @see 	com.maulss.enhancedlib.database.data.Data
	 * @see 	com.maulss.enhancedlib.database.data.StatType
	 */
	public abstract void create(@NotNull Data[] types,
								@NotNull StatType index);


	/**
	 * Checks if the name of the table held in this {@code Table}
	 * instance actually exists in the database.
	 *
	 * <p>This is processed by filtering out tables in the database
	 * which name and type matches the ones of this class and returning
	 * the one that was left using
	 * {@link DatabaseMetaData#getTables(String , String , String , String[])}</p>
	 *
	 * @return 	{@code true} if the name of the table was found, {@code false} if not.
	 * @throws 	DatabaseException
	 * 			If an {@link SQLException} exception occurs.
	 * @since   {@code EnhancedLib 1.1-SNAPSHOT}
	 * @see 	DatabaseMetaData
	 * @see 	DatabaseMetaData#getTables(String , String , String , String[])
	 */
	public abstract boolean exists();


	/**
	 * Inserts a new entry into the table containing the {@param
	 * columns} with their {@param types}.  The amount of columns
	 * must equal to the amount of values.  If the amount of values
	 * equal to the amount of columns that are in this table already,
	 * take a look at {@link #insert(Object...)} for in this case
	 * the provided columns are not necessary.
	 *
	 * @param 	columns
	 * 			The columns that correspond to the columns in the database.
	 * @param 	values
	 * 			The values to insert.  Each value must correspond to
	 * 			each column.
	 * @return 	A {@code CachedRowSet} containing the auto-generated key(s)
	 * 			generated by the execution of this update.
	 * @throws 	DatabaseException
	 * 			If a database error caused by {@link Database} occurs
	 *          or if the {@code length} of {@param columns} does not
	 *          equal to the {@code length} of {@param values}.
	 * @throws 	NullPointerException
	 * 			If {@code columns == null | values == null}.
	 * @throws 	IllegalArgumentException
	 * 			If {@code values.length == 0 | columns.length == 0}.
	 * @see 	com.maulss.enhancedlib.database.data.StatType
	 * @see 	#insert(Object...)
	 */
	public abstract CachedRowSet insertToColumns(@NotNull StatType[] columns,
												 @NotNull Object... values);


	/**
	 * Inserts a new entry into the table with the provided values.
	 * In this case, this method should only be used when the amount
	 * of values must equal to the amount of columns that exist in
	 * the table already.  If the amount of {@param values} does NOT
	 * equal to the amount of columns that exist in the table, take a
	 * look at {@link #insertToColumns(com.maulss.enhancedlib.database.data.StatType[] , Object...)}.
	 *
	 * @param 	values
	 * 			The values to insert.  Each value must correspond to
	 *          each column in the table.
	 * @return 	A {@code CachedRowSet} containing the auto-generated key(s)
	 * 			generated by the execution of this update.
	 * @throws 	NullPointerException
	 * 			If {@code values == null}.
	 * @throws 	IllegalArgumentException
	 * 			If {@code values.length == 0}.
	 * @throws 	DatabaseException
	 * 			If a database error caused by {@link Database} occurs.
	 * @see 	com.maulss.enhancedlib.database.data.StatType
	 * @see 	#insertToColumns(com.maulss.enhancedlib.database.data.StatType[] , Object...)
	 */
	public abstract CachedRowSet insert(@NotNull Object... values);


	/**
	 * Deletes an entire row from the table.
	 *
	 * @param 	identity
	 * 			The known identity which is used as an index in the database.
	 * @throws 	NullPointerException
	 * 			If {@code identity == null}.
	 * @throws 	DatabaseException
	 * 			If a database error caused by {@link Database} occurs.
	 * @see 	com.maulss.enhancedlib.database.Identity
	 */
	public abstract void delete(@NotNull Identity identity);


	/**
	 * Checks if an {@link com.maulss.enhancedlib.database.Identity}
	 * exists in this table.
	 *
	 * @param 	identity
	 * 			The known identity which is used as an index in the database.
	 * @return 	{@code true} if he exists, {@code false} if otherwise (or if null).
	 * @throws 	DatabaseException
	 * 			If a database error caused by {@link Database} occurs.
	 * @see 	#get(com.maulss.enhancedlib.database.Identity)
	 */
	public abstract boolean contains(@NotNull Identity identity);


	/**
	 * Updates a value in the database for the specified sub class of
	 * {@link com.maulss.enhancedlib.database.Identity}.  {@param value}
	 * is used to incrememnt, decrement or set the values specifically.
	 * For more information, take a look at
	 * {@link com.maulss.enhancedlib.database.value.Value} and
	 * {@link com.maulss.enhancedlib.database.value.ValueType}.
	 *
	 * @param 	identity
	 * 			Any instance of {@link com.maulss.enhancedlib.database.Identity}
	 *          to be found in the database.
	 * @param 	column
	 * 			The column that is to be modified.
	 * @param 	value
	 * 			The new value that will replace the old one.
	 * @return 	A {@code CachedRowSet} containing the auto-generated key(s)
	 * 			generated by the execution of this update.
	 * @throws 	NullPointerException
	 * 			If {@param identity}, {@param columns} or {@param values}
	 *          is {@code null}.
	 * @throws 	IllegalArgumentException
	 * 			If the size of {@param columns} does not correspond to the
	 *          size of {@param values}.
	 * @throws 	DatabaseException
	 * 			If a database error caused by {@link Database} occurs.
	 * @see 	com.maulss.enhancedlib.database.Identity
	 * @see 	com.maulss.enhancedlib.database.data.StatType
	 * @see 	com.maulss.enhancedlib.database.value.Value
	 */
	public final CachedRowSet update(@NotNull Identity identity,
									 @NotNull StatType column,
									 @NotNull Value value) {
		Validate.notNull(identity, "The identity must not be null in order to update its data");
		Validate.notNull(column, "The type of column to update is null");
		Validate.notNull(value, "The value to update for this identity is null");

		return update(identity, new StatType[] {column}, value);
	}


	/**
	 * Updates a value in the database for the specified sub class of
	 * {@link com.maulss.enhancedlib.database.Identity}.  If the value
	 * is of either {@link com.maulss.enhancedlib.database.value.ValueType#GIVE}
	 * or {@link com.maulss.enhancedlib.database.value.ValueType#TAKE},
	 * then use {@link #update(com.maulss.enhancedlib.database.Identity ,
	 * com.maulss.enhancedlib.database.data.StatType ,
	 * com.maulss.enhancedlib.database.value.Value)}.
	 *
	 * @param 	identity
	 * 			Any instance of {@link com.maulss.enhancedlib.database.Identity}
	 *          to be found in the database.
	 * @param 	column
	 * 			The column that is to be modified.
	 * @param 	value
	 * 			The new value that will replace the old one.
	 * @return 	A {@code CachedRowSet} containing the auto-generated key(s)
	 * 			generated by the execution of this update.
	 * @throws 	NullPointerException
	 * 			If {@param identity}, {@param columns} or {@param values}
	 *          is {@code null}.
	 * @throws 	IllegalArgumentException
	 * 			If the size of {@param columns} does not correspond to the
	 *          size of {@param values}.
	 * @throws 	DatabaseException
	 * 			If a database error caused by {@link Database} occurs.
	 * @see 	com.maulss.enhancedlib.database.Identity
	 * @see 	com.maulss.enhancedlib.database.data.StatType
	 * @see 	com.maulss.enhancedlib.database.value.Value
	 */
	public final CachedRowSet update(@NotNull Identity identity,
									 @NotNull StatType column,
									 @NotNull Object value) {
		Validate.notNull(identity, "The identity must not be null in order to update its data");
		Validate.notNull(column, "The type of column to update is null");
		Validate.notNull(value, "The value to update for this identity is null");

		return update(identity, new StatType[] {column}, value);
	}


	/**
	 * Updates a value in the database for the specified sub class of
	 * {@link com.maulss.enhancedlib.database.Identity}.
	 * If the value is of either
	 * {@link com.maulss.enhancedlib.database.value.ValueType#GIVE} or
	 * {@link com.maulss.enhancedlib.database.value.ValueType#TAKE},
	 * then use {@link #update(com.maulss.enhancedlib.database.Identity ,
	 * com.maulss.enhancedlib.database.data.StatType ,
	 * com.maulss.enhancedlib.database.value.Value)}.
	 *
	 * <p>This method, unlike
	 * {@link #update(com.maulss.enhancedlib.database.Identity ,
	 * com.maulss.enhancedlib.database.data.StatType ,
	 * com.maulss.enhancedlib.database.value.Value)} and
	 * {@link #update(com.maulss.enhancedlib.database.Identity ,
	 * com.maulss.enhancedlib.database.data.StatType , Object)} will
	 * update multiple columns at once for a single entry.  The size of
	 * {@param columns} must correspond to the size of {@param values}.</p>
	 *
	 * @param 	identity
	 * 			Any instance of {@link com.maulss.enhancedlib.database.Identity}
	 *          to be found in the database.
	 * @param 	columns
	 * 			The columns that are to be modified.
	 * @param 	values
	 * 			The new values that will replace the old ones.
	 * @return 	A {@code CachedRowSet} containing the auto-generated key(s)
	 * 			generated by the execution of this update.
	 * @throws 	NullPointerException
	 * 			If {@param identity}, {@param columns} or {@param values}
	 *          is {@code null}.
	 * @throws 	IllegalArgumentException
	 * 			If the size of {@param columns} does not correspond to the
	 *          size of {@param values}.
	 * @throws 	DatabaseException
	 * 			If a database error caused by {@link Database} occurs.
	 * @see 	com.maulss.enhancedlib.database.Identity
	 * @see 	com.maulss.enhancedlib.database.data.StatType
	 * @see 	com.maulss.enhancedlib.database.value.Value
	 */
	public final CachedRowSet update(@NotNull Identity identity,
									 @NotNull StatType[] columns,
									 @NotNull Object... values) {
		Validate.notNull(identity, "The identity must not be null in order to update its data");
		Validate.notEmpty(columns, "The type of column to update is null");
		Validate.notEmpty(values, "The value to update for this identity is null");
		int valength = values.length;
		Validate.isTrue(columns.length == valength, "The amount of columns must equal to the amount of values provided");

		Value[] setValues = new Value[valength];
		for (int x = 0; x < valength; ++x) {
			setValues[x] = new Value(values[x], ValueType.SET);
		}

		return update(identity, columns, setValues);
	}


	/**
	 * Updates a value in the database for the specified sub class of
	 * {@link com.maulss.enhancedlib.database.Identity}.  {@param value}
	 * is used to incrememnt, decrement or set the values specifically.
	 * For more information, take a look at
	 * {@link com.maulss.enhancedlib.database.value.Value} and
	 * {@link com.maulss.enhancedlib.database.value.ValueType}.
	 *
	 * <p>This method, unlike {@link #update(com.maulss.enhancedlib.database.Identity ,
	 * com.maulss.enhancedlib.database.data.StatType ,
	 * com.maulss.enhancedlib.database.value.Value)} and
	 * {@link #update(com.maulss.enhancedlib.database.Identity ,
	 * com.maulss.enhancedlib.database.data.StatType , Object)}
	 * will update multiple columns at once for a single entry.
	 * The size of {@param columns} must correspond to the size of
	 * {@param values}.</p>
	 *
	 * @param 	identity
	 * 			Any instance of {@link com.maulss.enhancedlib.database.Identity}
	 *          to be found in the database.
	 * @param 	columns
	 * 			The columns that are to be modified.
	 * @param 	values
	 * 			The new values that will replace the old ones.
	 * @return 	A {@code CachedRowSet} containing the auto-generated key(s)
	 * 			generated by the execution of this update.
	 * @throws 	NullPointerException
	 * 			If {@param identity}, {@param columns} or {@param values}
	 *          is {@code null}.
	 * @throws 	IllegalArgumentException
	 * 			If the size of {@param columns} does not correspond to the
	 *          size of {@param values}.
	 * @throws 	DatabaseException
	 * 			If a database error caused by {@link Database} occurs.
	 * @see 	com.maulss.enhancedlib.database.Identity
	 * @see 	com.maulss.enhancedlib.database.data.StatType
	 * @see 	com.maulss.enhancedlib.database.value.Value
	 */
	public abstract CachedRowSet update(@NotNull Identity identity,
										@NotNull StatType[] columns,
										@NotNull Value... values);


	/**
	 * Returns a value found in this table from the criteria specified
	 * in the parameters.
	 *
	 * @param 	identity
	 * 			Any instance of {@link com.maulss.enhancedlib.database.Identity}
	 *          that holds this data.
	 * @param 	column
	 * 			The column where this value is located.
	 * @return 	The value that was found in the table.
	 * @throws 	NullPointerException
	 * 			If {@param identity} or {@param column} is {@code null}.
	 * @throws 	DatabaseException
	 * 			If a database error caused by {@link Database} occurs.
	 * @see 	com.maulss.enhancedlib.database.Identity
	 * @see 	com.maulss.enhancedlib.database.data.StatType
	 */
	@NotNull
	public final Object get(@NotNull Identity identity,
							@NotNull StatType column) {
		return get(identity, new StatType[] {column})[0];
	}


	/**
	 * Returns the values found in this table from the criteria specified
	 * in the parameters.
	 *
	 * <p>Looks up multiple columns at once - {@code Object} array returned
	 * will be the same size as {@param columns}.</p>
	 *
	 * @param 	identity
	 * 			Any instance of {@link com.maulss.enhancedlib.database.Identity}
	 *          that holds this data.
	 * @param 	columns
	 * 			The columns where these values are located.
	 * @return 	The values that were found in the table.
	 * @throws 	NullPointerException
	 * 			If {@param identity} or {@param columns} is {@code null}.
	 * @throws 	IllegalArgumentException
	 * 			If any of the {@code StatType} objects in {@param columns}
	 * 			is {@code null}.
	 * @throws 	DatabaseException
	 * 			If a database error caused by {@link Database} occurs.
	 * @see     com.maulss.enhancedlib.database.data.StatType
	 * @see 	com.maulss.enhancedlib.database.Identity
	 */
	@NotNull
	public abstract Object[] get(@NotNull Identity identity,
								 @NotNull StatType... columns);


	/**
	 * Returns a {@link javax.sql.rowset.CachedRowSet} filled with data
	 * obtained from the table that holds the entire entry under the player's name.
	 *
	 * @param 	identity
	 * 			Any instance of {@link com.maulss.enhancedlib.database.Identity}
	 *          that holds the data of the table.
	 * @return 	The entry that was found in the table.
	 * @throws 	NullPointerException
	 * 			If {@code identity == null}.
	 * @throws 	DatabaseException
	 * 			If a database error caused by {@link Database} occurs.
	 * @see 	com.maulss.enhancedlib.database.Identity
	 */
	@NotNull
	public abstract CachedRowSet get(@NotNull Identity identity);


	/**
	 * @return 	Returns all rows (entries) that were found in the entire table,
	 * 			without limiting on providing search criteria.
	 * @throws 	DatabaseException
	 * 			If a database error caused by {@link Database} occurs.
	 */
	@NotNull
	public abstract CachedRowSet getAll();


	/**
	 * @return 	The amount of rows (entries) that were found in the entire table.
	 * @throws 	DatabaseException
	 * 			If a database error caused by {@link Database} occurs.
	 */
	public abstract int getTotalRows();


	protected final Database getDatabase() {
		return database;
	}


	@Override
	public final String toString() {
		return table;
	}
}